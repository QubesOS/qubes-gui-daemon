 gui-daemon/xside.c | 250 +++++++++++++++++++++++++++++++----------------------
 1 file changed, 145 insertions(+), 105 deletions(-)

gui-daemon/xside.c --- 1/14 --- C
47 47 #include <X11/Xutil.h>
48 48 #include <X11/extensions/XShm.h>
49 49 #include <X11/extensions/shmproto.h>
50 50 #include <X11/extensions/XI2.h>
[2m.. [0m51 #include <X11/extensions/XInput2.h>
51 52 #include <X11/Xatom.h>
52 53 #include <X11/cursorfont.h>
53 54 #include <X11/Xlib-xcb.h>
54 55 #include <libconfig.h>

gui-daemon/xside.c --- 2/14 --- C
273 275         return 0;
274 276     }
[2m... [0m277 
[2m... [0m278     char error_msg[1024];
[2m... [0m279     XGetErrorText(ev->display, ev->error_code, error_msg, sizeof(error_msg));
[2m... [0m280     int now = (int) time(NULL); // truncate
[2m... [0m281     fprintf(stderr, "[%d] Encountered X Error:\n", now);
[2m... [0m282     fprintf(stderr, error_msg);
[2m... [0m283     
[2m... [0m284 
275 285 #ifdef MAKE_X11_ERRORS_FATAL

gui-daemon/xside.c --- 3/14 --- C
374                (const unsigned char *)&g->time_win,                                   384                (const unsigned char *)&g->time_win,                                  
375                1);                                                                    385                1);                                                                   
376     (void) XSelectInput(g->display, child_win,                                        386     (void) XSelectInput(g->display, child_win,                                       
377                 ExposureMask | KeyPressMask | KeyReleaseMask |                        387                 ExposureMask |                                                       
378                 ButtonPressMask | ButtonReleaseMask |                                 388                 ButtonPressMask | ButtonReleaseMask |                                
379                 PointerMotionMask | EnterWindowMask | LeaveWindowMask |               389                 PointerMotionMask | EnterWindowMask | LeaveWindowMask |              
380                 FocusChangeMask | StructureNotifyMask | PropertyChangeMask);          390                 StructureNotifyMask | PropertyChangeMask);                           
[2m... [0m                                                                                      391                                                                                      
[2m... [0m                                                                                      392     // select xinput events                                                          
[2m... [0m                                                                                      393     XIEventMask xi_mask;                                                             
[2m... [0m                                                                                      394     xi_mask.deviceid = XIAllMasterDevices; // https://stackoverflow.com/questions/440
[2m... [0m                                                                                      [92m[2m... [0m[39m95001/getting-double-rawkeypress-events-using-xinput2                                
[2m... [0m                                                                                      395     xi_mask.mask_len = XIMaskLen(XI_LASTEVENT);                                      
[2m... [0m                                                                                      396     if (!(xi_mask.mask = calloc(xi_mask.mask_len, sizeof(char)))) {                  
[2m... [0m                                                                                      397         fputs("Out of memory!\n", stderr);                                           
[2m... [0m                                                                                      398         exit(1);                                                                     
[2m... [0m                                                                                      399     }                                                                                
[2m... [0m                                                                                      400     XISetMask(xi_mask.mask, XI_KeyPress);                                            
[2m... [0m                                                                                      401     XISetMask(xi_mask.mask, XI_KeyRelease);                                          
[2m... [0m                                                                                      402     XISetMask(xi_mask.mask, XI_FocusIn);                                             
[2m... [0m                                                                                      403     XISetMask(xi_mask.mask, XI_FocusOut);                                            
[2m... [0m                                                                                      404                                                                                      
[2m... [0m                                                                                      405     int err = XISelectEvents(g->display, child_win, &xi_mask, 1);                    
[2m... [0m                                                                                      406     if (err) {                                                                       
[2m... [0m                                                                                      407         fprintf(stderr, "Failed to subscribe to XI events. ErrCode: %d\n", err);     
[2m... [0m                                                                                      408         exit(1);                                                                     
[2m... [0m                                                                                      409     }                                                                                
[2m... [0m                                                                                      410     free(xi_mask.mask);                                                              
[2m... [0m                                                                                      411     XSync(g->display, False);                                                        
[2m... [0m                                                                                      412                                                                                      
[2m... [0m                                                                                      413                                                                                      
381     XSetWMProtocols(g->display, child_win, &g->wmDeleteMessage, 1);                   414     XSetWMProtocols(g->display, child_win, &g->wmDeleteMessage, 1);                  

gui-daemon/xside.c --- 4/14 --- C
656 689     if (!XQueryExtension(g->display, "MIT-SHM",
657 690                 &g->shm_major_opcode, &ev_base, &err_base))
658 691         fprintf(stderr, "MIT-SHM X extension missing!\n");
[2m... [0m692     if (!XQueryExtension(g->display, "XInputExtension", &g->xi_opcode, &ev_base, &err_base)) {
[2m... [0m693         fprintf(stderr, "X Input extension not available. Key press events not available. Upgrade your X11 server now.\n");
[2m... [0m694         exit(1);
[2m... [0m695     }
659 696     /* get the work area */
660 697     XSelectInput(g->display, g->root_win, PropertyChangeMask);
661 698     update_work_area(g);

gui-daemon/xside.c --- 5/14 --- C
1250 /* check and handle guid-special keys                                                1287 /* check and handle guid-special keys                                               
1251  * currently only for inter-vm clipboard copy                                        1288  * currently only for inter-vm clipboard copy                                       
1252  */                                                                                  1289  */                                                                                 
1253 static int is_special_keypress(Ghandles * g, const XKeyEvent * ev, XID remote_winid) 1290 static int is_special_keypress(Ghandles * g, const XIDeviceEvent * ev, XID remote_wi
[91m[2m.... [0m[39m                                                                                     [92m[2m.... [0m[39mnid)                                                                                
1254 {                                                                                    1291 {                                                                                   
1255     struct msg_hdr hdr;                                                              1292     struct msg_hdr hdr;                                                             
1256     char *data;                                                                      1293     char *data;                                                                     
1257     int len;                                                                         1294     int len;                                                                        
1258     Time clipboard_file_xevent_time;                                                 1295     Time clipboard_file_xevent_time;                                                
1259                                                                                      1296                                                                                     
1260     /* copy */                                                                       1297     /* copy */                                                                      
1261     if (((int)ev->state & SPECIAL_KEYS_MASK) == g->copy_seq_mask                     1298     if (((int)ev->mods.effective & SPECIAL_KEYS_MASK) == g->copy_seq_mask           
1262         && ev->keycode == XKeysymToKeycode(g->display, g->copy_seq_key)) {           1299         && ev->detail == XKeysymToKeycode(g->display, g->copy_seq_key)) {           
1263         if (ev->type != KeyPress)                                                    1300         if (ev->evtype != KeyPress)                                                 
1264             return 1;                                                                1301             return 1;                                                               
1265         g->clipboard_xevent_time = ev->time;                                         1302         g->clipboard_xevent_time = ev->time;                                        
1266         if (g->qrexec_clipboard) {                                                   1303         if (g->qrexec_clipboard) {                                                  

gui-daemon/xside.c --- 6/14 --- C
1280     }                                                                                1317     }                                                                               
1281                                                                                      1318                                                                                     
1282     /* paste */                                                                      1319     /* paste */                                                                     
1283     if (((int)ev->state & SPECIAL_KEYS_MASK) == g->paste_seq_mask                    1320     if (((int)ev->mods.effective & SPECIAL_KEYS_MASK) == g->paste_seq_mask          
1284         && ev->keycode == XKeysymToKeycode(g->display, g->paste_seq_key)) {          1321         && ev->detail == XKeysymToKeycode(g->display, g->paste_seq_key)) {          
1285         if (ev->type != KeyPress)                                                    1322         if (ev->evtype != KeyPress)                                                 
1286             return 1;                                                                1323             return 1;                                                               
1287         inter_appviewer_lock(g, 1);                                                  1324         inter_appviewer_lock(g, 1);                                                 
1288         clipboard_file_xevent_time = get_clipboard_file_xevent_timestamp();          1325         clipboard_file_xevent_time = get_clipboard_file_xevent_timestamp();         

gui-daemon/xside.c --- 7/14 --- C
1339             1);                                                                      1376             1);                                                                     
1340 }                                                                                    1377 }                                                                                   
1341                                                                                      1378                                                                                     
1342 /* handle local Xserver event: XKeyEvent                                             1379 /* handle local XInput event                                                        
1343  * send it to relevant window in VM                                                  1380  * send it to relevant window in VM                                                 
1344  */                                                                                  1381  */                                                                                 
1345 static void process_xevent_keypress(Ghandles * g, const XKeyEvent * ev)              1382 static void process_xievent_keypress(Ghandles * g, const XIDeviceEvent * ev)        
1346 {                                                                                    1383 {                                                                                   
1347     struct msg_hdr hdr;                                                              1384     struct msg_hdr hdr;                                                             
1348     struct msg_keypress k;                                                           1385     struct msg_keypress k;                                                          
1349     CHECK_NONMANAGED_WINDOW(g, ev->window);                                          1386     CHECK_NONMANAGED_WINDOW(g, ev->event);                                          
[2m.... [0m                                                                                     1387     // yes, ev->event is the window number                                          
1350     update_wm_user_time(g, ev->window, ev->time);                                    1388     update_wm_user_time(g, ev->event, ev->time);                                    
[2m.... [0m                                                                                     1389     if (ev->flags & XIKeyRepeat)                                                    
[2m.... [0m                                                                                     1390         return; // don't send key repeat events                                     
1351     if (is_special_keypress(g, ev, vm_window->remote_winid))                         1391     if (is_special_keypress(g, ev, vm_window->remote_winid))                        
1352         return;                                                                      1392         return;                                                                     
1353     k.type = ev->type;                                                               1393     k.type = ev->evtype; // ev->type is always Generic Event                        
1354     k.x = ev->x;                                                                     1394     k.x = ev->event_x;                                                              
1355     k.y = ev->y;                                                                     1395     k.y = ev->event_y;                                                              
1356     k.state = ev->state;                                                             1396     k.state = ev->mods.effective;                                                   
1357     k.keycode = ev->keycode;                                                         1397     k.keycode = ev->detail;                                                         
1358     hdr.type = MSG_KEYPRESS;                                                         1398     hdr.type = MSG_KEYPRESS;                                                        
1359     hdr.window = vm_window->remote_winid;                                            1399     hdr.window = vm_window->remote_winid;                                           
1360     write_message(g->vchan, hdr, k);                                                 1400     write_message(g->vchan, hdr, k);                                                

gui-daemon/xside.c --- 8/14 --- C
1880 1919     }
1881 1920 }
[2m.... [0m1921 
[2m.... [0m1922 static void send_keymap_notify(Ghandles * g)
[2m.... [0m1923 {
[2m.... [0m1924     struct msg_hdr hdr;
[2m.... [0m1925     char keys[32];
[2m.... [0m1926     int err = XQueryKeymap(g->display, keys);
[2m.... [0m1927     if (err) {
[2m.... [0m1928         fprintf(stderr, "XQueryKeymap failed: %d.\n", err);
[2m.... [0m1929         return; // non fatal
[2m.... [0m1930     }
[2m.... [0m1931     hdr.type = MSG_KEYMAP_NOTIFY;
[2m.... [0m1932     hdr.window = 0;
[2m.... [0m1933     write_message(g->vchan, hdr, keys);
[2m.... [0m1934 }
1882 1935 
1883 1936 /* handle local Xserver event: EnterNotify, LeaveNotify
1884 1937  * send it to VM, but alwo we use it to fix docked

gui-daemon/xside.c --- 9/14 --- C
1890     CHECK_NONMANAGED_WINDOW(g, ev->window);                                          1943     CHECK_NONMANAGED_WINDOW(g, ev->window);                                         
1891                                                                                      1944                                                                                     
1892     if (ev->type == EnterNotify) {                                                   1945     if (ev->type == EnterNotify) {                                                  
1893         char keys[32];                                                               [2m.... [0m
1894         XQueryKeymap(g->display, keys);                                              1946         send_keymap_notify(g);                                                      
1895         hdr.type = MSG_KEYMAP_NOTIFY;                                                [2m.... [0m
1896         hdr.window = 0;                                                              [2m.... [0m
1897         write_message(g->vchan, hdr, keys);                                          [2m.... [0m
1898     }                                                                                1947     }                                                                               
1899     /* move tray to correct position in VM */                                        1948     /* move tray to correct position in VM */                                       
1900     if (vm_window->is_docked &&                                                      1949     if (vm_window->is_docked &&                                                     

gui-daemon/xside.c --- 10/14 --- C
1935                                                                                      1984                                                                                     
1936 /* handle local Xserver event: FocusIn, FocusOut                                     1985 /* handle local Xserver event: FocusIn, FocusOut                                    
1937  * send to relevant window in VM */                                                  1986  * send to relevant window in VM */                                                 
1938 static void process_xevent_focus(Ghandles * g, const XFocusChangeEvent * ev)         1987 static void process_xievent_focus(Ghandles * g, const XILeaveEvent * ev)            
1939 {                                                                                    1988 {                                                                                   
1940     struct msg_hdr hdr;                                                              1989     struct msg_hdr hdr;                                                             
1941     struct msg_focus k;                                                              1990     struct msg_focus k;                                                             
1942     CHECK_NONMANAGED_WINDOW(g, ev->window);                                          1991     CHECK_NONMANAGED_WINDOW(g, ev->event);                                          
1943                                                                                      [2m.... [0m
1944     /* Ignore everything other than normal, non-temporary focus change. In           [2m.... [0m
1945      * practice it ignores NotifyGrab and NotifyUngrab. VM does not have any         [2m.... [0m
1946      * way to grab focus in dom0, so it shouldn't care about those events. Grab      [2m.... [0m
1947      * is used by window managers during task switching (either classic task         [2m.... [0m
1948      * switcher, or KDE "present windows" feature).                                  [2m.... [0m
1949      */                                                                              [2m.... [0m
1950     if (ev->mode != NotifyNormal && ev->mode != NotifyWhileGrabbed)                  1992     update_wm_user_time(g, ev->event, ev->time);                                    
1951         return;                                                                      [2m.... [0m
1952                                                                                      1993                                                                                     
1953     if (ev->type == FocusIn) {                                                       1994     if (ev->type == XI_FocusIn) {                                                   
1954         char keys[32];                                                               [2m.... [0m
1955         XQueryKeymap(g->display, keys);                                              1995         send_keymap_notify(g);                                                      
1956         hdr.type = MSG_KEYMAP_NOTIFY;                                                [2m.... [0m
1957         hdr.window = 0;                                                              [2m.... [0m
1958         write_message(g->vchan, hdr, keys);                                          [2m.... [0m
1959     }                                                                                1996     }                                                                               
1960     hdr.type = MSG_FOCUS;                                                            1997     hdr.type = MSG_FOCUS;                                                           
1961     hdr.window = vm_window->remote_winid;                                            1998     hdr.window = vm_window->remote_winid;                                           
1962     k.type = ev->type;                                                               1999     k.type = ev->evtype;                                                            
1963     /* override NotifyWhileGrabbed with NotifyNormal b/c VM shouldn't care           [2m.... [0m
1964      * about window manager details during focus switching                           [2m.... [0m
1965      */                                                                              [2m.... [0m
1966     k.mode = NotifyNormal;                                                           2000     k.mode = ev->mode;                                                              
1967     k.detail = ev->detail;                                                           2001     k.detail = ev->detail;                                                          
1968     write_message(g->vchan, hdr, k);                                                 2002     write_message(g->vchan, hdr, k);                                                
1969 }                                                                                    2003 }                                                                                   

gui-daemon/xside.c --- 11/14 --- C
2313     } else if (ev->data.l[1] == XEMBED_FOCUS_IN) {                                   2347     } else if (ev->data.l[1] == XEMBED_FOCUS_IN) {                                  
2314         struct msg_hdr hdr;                                                          2348         struct msg_hdr hdr;                                                         
2315         struct msg_focus k;                                                          2349         struct msg_focus k;                                                         
2316         char keys[32];                                                               [2m.... [0m
2317         XQueryKeymap(g->display, keys);                                              2350         send_keymap_notify(g);                                                      
2318         hdr.type = MSG_KEYMAP_NOTIFY;                                                [2m.... [0m
2319         hdr.window = 0;                                                              [2m.... [0m
2320         write_message(g->vchan, hdr, keys);                                          [2m.... [0m
2321         hdr.type = MSG_FOCUS;                                                        2351         hdr.type = MSG_FOCUS;                                                       
2322         hdr.window = vm_window->remote_winid;                                        2352         hdr.window = vm_window->remote_winid;                                       
2323         k.type = FocusIn;                                                            2353         k.type = FocusIn;                                                           

gui-daemon/xside.c --- 12/14 --- C
2332 static void process_xevent(Ghandles * g)                                             2362 static void process_xevent(Ghandles * g)                                            
2333 {                                                                                    2363 {                                                                                   
2334     XEvent event_buffer;                                                             2364     XEvent event_buffer;                                                            
[2m.... [0m                                                                                     2365     XGenericEventCookie *cookie = &event_buffer.xcookie;                            
2335     XNextEvent(g->display, &event_buffer);                                           2366     XNextEvent(g->display, &event_buffer);                                          
2336     switch (event_buffer.type) {                                                     2367     if (XGetEventData(g->display, cookie) &&                                        
2337     case KeyPress:                                                                   2368             cookie->type == GenericEvent &&                                         
2338     case KeyRelease:                                                                 2369             cookie->extension == g->xi_opcode) {                                    
2339         process_xevent_keypress(g, (XKeyEvent *) & event_buffer);                    2370         XIEvent* xi_event = cookie->data; // from test_xi2.c in xinput cli utility  
2340         break;                                                                       2371                                                                                     
[2m.... [0m                                                                                     2372         switch (xi_event->evtype) {                                                 
[2m.... [0m                                                                                     2373         // ideally raw input events are better, but I'm relying on X server's built-
[2m.... [0m                                                                                     [92m[2m.... [0m[39min event filtering and routing feature here                                         
[2m.... [0m                                                                                     2374         case XI_KeyPress:                                                           
[2m.... [0m                                                                                     2375         case XI_KeyRelease:                                                         
[2m.... [0m                                                                                     2376             process_xievent_keypress(g, (XIDeviceEvent *)xi_event);                 
[2m.... [0m                                                                                     2377             break;                                                                  
[2m.... [0m                                                                                     2378         case XI_FocusIn:                                                            
[2m.... [0m                                                                                     2379         case XI_FocusOut:                                                           
[2m.... [0m                                                                                     2380             process_xievent_focus(g, (XILeaveEvent *)xi_event);                     
[2m.... [0m                                                                                     2381             break;                                                                  
[2m.... [0m                                                                                     2382         }                                                                           
[2m.... [0m                                                                                     2383         XFreeEventData(g->display, cookie);                                         
[2m.... [0m                                                                                     2384     } else {                                                                        
[2m.... [0m                                                                                     2385         switch (event_buffer.type) {                                                
2341     case ReparentNotify:                                                             2386         case ReparentNotify:                                                        
2342         process_xevent_reparent(g, (XReparentEvent *) &event_buffer);                2387             process_xevent_reparent(g, (XReparentEvent *) &event_buffer);           
2343         break;                                                                       2388             break;                                                                  

gui-daemon/xside.c --- 13/14 --- C
2357 2402         process_xevent_crossing(g,
2358 2403                     (XCrossingEvent *) & event_buffer);
2359 2404         break;
2360 [2m.... [0m    case FocusIn:
2361 [2m.... [0m    case FocusOut:
2362 [2m.... [0m        process_xevent_focus(g,
2363 [2m.... [0m                     (XFocusChangeEvent *) & event_buffer);
2364 [2m.... [0m        break;
2365 2405     case Expose:
2366 2406         process_xevent_expose(g, (XExposeEvent *) & event_buffer);
2367 2407         break;

gui-daemon/xside.c --- 14/14 --- C
2387                          event_buffer.xclient.window);                               2427                             event_buffer.xclient.window);                           
2388         }                                                                            2428             }                                                                       
2389         break;                                                                       2429             break;                                                                  
2390     default:;                                                                        2430         }                                                                           
2391     }                                                                                2431     }                                                                               
2392 }                                                                                    2432 }                                                                                   
2393                                                                                      2433                                                                                     

